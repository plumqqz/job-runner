Это микрофреймворк для обработки последовательности транзакций.  Каждая такая последовательность состоит из перечисления функций
или массива функций. Каждая функция - отдельная или в массиве - из этой последовательности вычисляется параллельно.
Ближайшим аналогом можно назвать Spring Batch или JSR-352. Этот фреймворк, конечно, сильно попроще, но тем не менее
вполне подходит для своих задач.

Как это работает.
Пример:

<?php
include_once("job_manager.php");
$dbh = new PDO('mysql:host=localhost;port=3306;dbname=jobs', 'root','');
$je = new JobExecutor();
# сначала надо установить соединение с базой, где живет репозитарий
# Репозитарий описывается в начале файла job_manager.php
#  в виде sql-скрипта.
$je->setDbh($dbh);

# Создаем джоб
$job = new Job("RUN#1");

# Добавляем в него функции
# Каждая функция получает три параметра - первые 
$job->submit(function($param, &$ctx, $je){
                   $ctx['val']=1;
                   print "In #1 param[name]={$param['name']} ctx[val]={$ctx['val']}\n";
             })
    ->submit([ function($param, &$ctx){
                   print "In #2.1 param[name]={$param['name']} ctx[val]={$ctx['val']}\n";        
                   $ctx['val']++;
               },
               function($param, &$ctx){
                   print "In #2.2 param[name]={$param['name']} ctx[val]={$ctx['val']}\n";
                   $ctx['val']++;
                   if($ctx['val']<10){
                      return "CONTINUE";
                   }
               }
             ]
    )
    ->submit(function($param, &$ctx){
                   print "In #3 param[name]={$param['name']} ctx[val]={$ctx['val']}\n";
                   $ctx['val']++;
            });
# Добавляем в список доступных джобов. Надо следить, чтобы каждый логический джоб имел свое имя и 
# эти имена не конфликтовали
$je->add($job);

$je->execute("RUN#1", [ "path" => 1, "name"=>'Name'.time() ]);	
$je->run();

